# -*- coding: utf-8 -*-
"""IrisFlowerCalssification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/185TSQfW6ircbXLY9rbHTxXNwPNdyzebo
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

path = '/content/drive/MyDrive/Iris.csv'
df = pd.read_csv(path)
df.head()

df = df.drop(columns =["Id"])
df.head()

#Now we display stats about data
df.describe()

df.info()

df['Species'].value_counts()

df.shape

df.isnull().sum()

df['SepalLengthCm'].hist()

df['SepalWidthCm'].hist()

df['PetalLengthCm'].hist()

df['PetalWidthCm'].hist()

color = ['green','red','black']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']
for z in range(3):
    x = df[df['Species'] == species[z]]
    plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = color[z], label = species[z])
    
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = color[i], label = species[i])
    
plt.xlabel("petal Length")
plt.ylabel("petal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = color[i], label = species[i])
    
plt.xlabel("Sepal Length")
plt.ylabel("Petal Length")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = color[i], label = species[i])
    
plt.xlabel("Sepal Width")
plt.ylabel("Petal Width")
plt.legend()

df.corr()

corr = df.corr()
fig, ax = plt.subplots(figsize = (10,8))
sns.heatmap(corr, annot = True, ax = ax)

from sklearn.preprocessing import LabelEncoder
la = LabelEncoder()
df['Species'] = la.fit_transform(df['Species'])
df.head()

from sklearn.model_selection import train_test_split
X = df.drop(columns = ["Species"])
Y = df['Species']
x_train, x_test,y_train, y_test = train_test_split(X ,Y ,test_size = 0.30)
from sklearn.linear_model import LogisticRegression
smodel = LogisticRegression()
smodel.fit(x_train, y_train)
print("Accuracy is : ",smodel.score(x_test, y_test)*100)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()
model.fit(x_train, y_train)

print("Accuracy is : ",model.score(x_test, y_test)*100)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(x_train, y_train)

print("Accuracy is : ",model.score(x_test, y_test)*100)